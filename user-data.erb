#cloud-config

coreos:
  etcd:
      #generate a new token for each unique cluster from https://discovery.etcd.io/new
      <%= @etcd_discovery %>
      addr: $public_ipv4:4001
      peer-addr: $public_ipv4:7001
  units:
<% if @flannel %>
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: flannel.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Wants=network-online.target
        After=etcd.service
        Wants=etcd.service
        Description=flannel is an etcd backed overlay network for containers

        [Service]
        Type=notify
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin http://storage.googleapis.com/k8s/flanneld
        ExecStartPre=/usr/bin/chmod +x /opt/bin/flanneld
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "<%= @flannel_network %>" }'
        ExecStart=/opt/bin/flanneld -etcd-endpoints http://127.0.0.1:4001 -iface eth1
    - name: docker.service
      command: start
      content: |
        [Unit]
        After=flannel.service
        Wants=flannel.service
        Description=Docker Application Container Engine
        Documentation=http://docs.docker.io

        [Service]
        EnvironmentFile=/run/flannel/subnet.env
        ExecStartPre=/bin/mount --make-rprivate /
        ExecStart=/usr/bin/docker -d --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU} -s=overlay -H fd:// $DOCKER_OPTS

        [Install]
        WantedBy=multi-user.target
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin http://storage.googleapis.com/k8s/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
<% else %>
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
<% end %>
<% @services.each do |service| %>
    - name: factorish-<%= service[:name] %>.service
      command: start
      content: |
        [Unit]
        Description=Factorish <%= service[:name] %>
        Requires=docker.service
        After=docker.service

        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill factorish-<%= service[:name] %>
        ExecStartPre=-/usr/bin/docker rm factorish-<%= service[:name] %>
        ExecStartPre=-/run/factorish/fetch_service <%= service[:name] %> <%= service[:repository] %>
        ExecStart=/bin/sh -c "/usr/bin/docker run --rm <%= service[:docker_options].join(' ') %> --name factorish-<%= service[:name] %> <%= service[:repository]%> <%= service[:command] %>"
        ExecStop=/usr/bin/docker stop factorish-<%= service[:name] %>
<% end %>
<% @applications.each do |app| %>
    - name: factorish-<%= app[:name] %>.service
      command: start
      content: |
        [Unit]
        Description=Factorish <%= app[:name] %>
        Requires=factorish-registry.service
        After=factorish-registry.service

        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill factorish-<%= app[:name] %>
        ExecStartPre=-/usr/bin/docker rm factorish-<%= app[:name] %>
        ExecStartPre=-/run/factorish/build_image <%= app[:dockerfile] %> <%= app[:repository] %>
        ExecStart=/bin/sh -c "/usr/bin/docker run --rm <%= app[:docker_options].join(' ') %> --name factorish-<%= app[:name] %> <%= app[:repository]%> <%= app[:command] %>"
        ExecStop=/usr/bin/docker stop factorish-<%= app[:name] %>
<% end %>
write_files:
  - path: /etc/systemd/system/docker.service.d/50-insecure-registry.conf
    content: |
        [Service]
        Environment=DOCKER_OPTS='--insecure-registry="127.0.0.1:5000"'
  - path: /etc/motd
    content: "Example Demo\n"
  - path: /run/factorish/fetch_service
    permissions: '0755'
    content: |
      #!/bin/bash
      set -x
      if [[ -z $1 || -z $2 ]]; then
        echo 'Usage: fetch_service <name> <repository>'
        exit 1
      fi
      if [[ -e /run/factorish/fetch.lock ]]; then
        echo -n 'waiting my turn'
        while [[ -e /run/factorish/fetch.lock ]]; do
          sleep 5
          echo -n .
        done
        echo .
      else
        echo $1 > /run/factorish/fetch.lock
      fi
      echo Initializing service - $1
      etcdctl ls /factorish/services/$1 >/dev/null 2>&1 || etcdctl mkdir /factorish/services/$1 >/dev/null 2>&1
      if etcdctl mk /factorish/services/$1/fetching 1 >/dev/null 2>&1; then
        if [[ -e /home/core/share/registry/$1.tgz ]]; then
          echo - Loading $1 from host cache...
          docker images registry | grep registry > /dev/null || \
            docker load < /home/core/share/registry/$1.tgz > /dev/null 2>&1
        else
          echo - Pulling $2 from docker hub...
          docker pull $2 > /dev/null
          docker save $2 > /home/core/share/registry/$1.tgz
        fi
        etcdctl rm /factorish/services/$1/fetching
        etcdctl mk /factorish/services/$1/cached
        rm -f /run/factorish/fetch.lock
        exit 0
      else
        if ! etcdctl get /factorish/services/$1/cached; then
          while etcdctl get /factorish/services/$1/fetching >/dev/null 2>&1; do
            sleep 10
          done
        fi
        echo - Loading $1 from host cache...
        docker images registry | grep registry > /dev/null || \
          docker load < /home/core/share/registry/$1.tgz > /dev/null 2>&1
      fi
      rm -f /run/factorish/fetch.lock
  - path: /run/factorish/build_image
    permissions: '0755'
    content: |
      #!/bin/bash
      set -x
      if [[ -z $1 || -z $2 ]]; then
        echo 'Usage: build_image <dockerfile> <repository>'
        exit 1
      fi
      if [[ -e /run/factorish/build.lock ]]; then
        echo -n 'waiting my turn'
        while [[ -e /run/factorish/build.lock ]]; do
          sleep 5
          echo -n .
        done
        echo .
      else
        echo $1 > /run/factorish/fetch.lock
      fi
      while etcdctl get /factorish/builds/$2/building >/dev/null 2>&1; do
        sleep 10
      done
      echo Building $2 image
      echo fetching 127.0.0.1:5000/$2 if it already exists
      if ! docker pull 127.0.0.1:5000/$2; then
        echo not found, lets build it.
        etcdctl ls /factorish/builds >/dev/null 2>&1 || etcdctl mkdir /factorish/builds/$2 >/dev/null 2>&1
        if etcdctl mk /factorish/builds/$2/building 1 >/dev/null 2>&1; then
          docker build -t 127.0.0.1:5000/$2 $1
          docker tag -f 127.0.0.1:5000/$2 $2
          docker push 127.0.0.1:5000/$2
          etcdctl rm /factorish/builds/$2/building
          etcdctl mk /factorish/builds/$2/built
          rm -f /run/factorish/build.lock
          echo finished.
          exit 0
        fi
      fi
      if ! etcdctl get /factorish/builds/$2/built; then
        while etcdctl get /factorish/builds/$2/building >/dev/null 2>&1; do
          sleep 10
        done
      fi
      if docker pull 127.0.0.1:5000/$2; then
        docker tag -f 127.0.0.1:5000/$2 $2
        echo - $2 pulled from private registry.
        echo - run ./clean_registry if you expected this to rebuild.
      fi
      rm -f /run/factorish/build.lock
  - path: /etc/profile.d/functions.sh
    permissions: '0755'
    content: |
<% @applications.each do |app| %>
      function run_<%= app[:name] %>() {
        eval `cat /etc/environment | sed "s/^/export /"`
        echo "Running factorish-<%= app[:name] %>"
        docker run  -d <%= app[:docker_options].join(' ') %> --name factorish-<%= app[:name] %> <%= app[:repository]%>
      }
      function kill_<%= app[:name] %>() {
        /usr/bin/docker kill factorish-<%= app[:name] %>
        /usr/bin/docker rm factorish-<%= app[:name] %>
      }
      function build_<%= app[:name] %>() {
        docker build -t <%= app[:repository] %> <%=app[:dockerfile] %>
      }
      function <%= app[:name] %>() {
        /usr/bin/docker exec -it factorish-<%= app[:name] %> bash
      }
<% end %>
      function cleanup() {
        etcdctl rm --recursive /services
      }
